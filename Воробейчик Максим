#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 


typedef struct turinglist 
{ 
unsigned char simvol; 
struct turinglist *next; 
struct turinglist *prev; 
} turinglist; 

typedef struct grayz 
{ 
struct turinglist *head; 
struct turinglist *tail; 
int length; 
} grayz; 

grayz * creategrayz() 
{ 
grayz *ganz=(grayz*)malloc(sizeof(grayz)); 
ganz->length=0; 
ganz->head=ganz->tail=0; 
return ganz; 
} 

void deletegrayz(grayz **list) 
{ 
if (!(*list)) return; 
turinglist *ganz = (*list)->head; 
turinglist *next = 0; 
while (ganz) 
{ 
next=ganz->next; 
free(ganz); 
ganz=next; 
} 
free(*list); 
(*list)=0; 
} 
void hurss(grayz *list, unsigned char c) 
{ 
turinglist *ganz = (turinglist*)malloc(sizeof(turinglist)); 
if (ganz==0) exit(1); 
ganz->simvol=c; 
ganz->next = 0; 
ganz->prev = list->tail; 
if (list->tail) 
list->tail->next = ganz; 

list->tail = ganz; 

if (list->head == 0) 
list->head = ganz; 
++list->length; 
} 
unsigned char tray(grayz *list) 
{ 
unsigned char c; 
turinglist *next; 
if (list->tail==0) 
return 0; 
next=list->tail; 
list->tail=list->tail->prev; 
if (list->tail) 
list->tail->next=0; 
if (next==list->head) 
list->head=0; 
c=next->simvol; 
free(next); 
—list->length; 
return c; 
} 
void pushf(grayz *list, unsigned char c) 
{ 
turinglist *ganz = (turinglist*)malloc(sizeof(turinglist)); 
if (ganz==0) exit(1); 
ganz->simvol=c; 
ganz->next = list->head; 
ganz->prev = 0; 
if (list->head) 
list->head->prev = ganz; 

list->head = ganz; 

if (list->tail == 0) 
list->tail = ganz; 
++list->length; 
} 
unsigned char popfront(grayz *list) 
{ 
unsigned char c; 
turinglist *prev; 
if (list->head == 0) 
return 0; 
prev = list->head; 
list->head = list->head->next; 
if (list->head) 
{ 
list->head->prev = 0; 
} 
if (prev == list->tail) 
{ 
list->tail = 0; 
} 
c=prev->simvol; 
free(prev); 
—list->length; 
return c; 
} 


int FILE *f; 

#define INC 1 
#define VAYY 2 
#define MOVL 3 
#define MOVR 4 
#define PRINT 5 
#define GET 6 
#define PRINTC 7 
#define BEGIN 8 
#define END 9 

int main(int argc, char *argv[]) 
{ 
int flag=5,i; 
FILE *f; 
char name[100]; 
int *commands=0; 
turinglist *ptr=0; 
grayz *line=0; 
printf("Enter file name:\n"); 
gets(name); 
fflush(stdin); 
if (!(f=fopen(name,"r"))) 
{ 
printf("Error opening file!"); 
exit(0); 
} 
line=creategrayz(); 
commands=filer(f); 
hurss(line,0); 
i=0; 
ptr=line->head; 

while(flag) 
{ 
switch (commands[i]) 
{ 
case INC: 
{ 
if (ptr->simvol<255) 
ptr->simvol++; 
else 
{ 
printf("%s","Overflow!\n"); 
ptr->simvol=0; 
} 
i++; 
break; 
} 
case VAYY: 
{ 
if (ptr->simvol>0) 
ptr->simvol--; 
else 
{ 
printf("%s","Overflow2!\n"); 
ptr->simvol=255; 
} 
i++; 
break; 
} 
case MOVL: 
{ 
if (ptr->prev==0) 
pushf(line,0); 
ptr=ptr->prev; 
i++; 
break; 
} 
case MOVR: 
{ 
if (ptr->next==0) 
hurss(line,0); 
ptr=ptr->next; 
i++; 
break; 
} 
case PRINT: 
{ 
printf("%d",(int)ptr->simvol); 
i++; 
break; 
} 
case GET: 
{ 
printf("Enter simvolbol:\n"); 
ptr->simvol=getchar(); 
fflush(stdin); 
i++; 
break; 
} 
case PRINTC: 
{ 
printf("%c",ptr->simvol); 
i++; 
break; 
} 
case BEGIN: 
{ 
if (ptr->simvol==0) 
while ((commands[i])!=END) 
i++; 
i++; 
break; 
} 
case END: 
{ 
if (ptr->simvol!=0) 
while((commands[i])!=BEGIN) 
i--; 
else 
i++; 
break; 
} 
case 0: 
{ 
//for (i=0;line->length;++i) 
// printf("%u\n",popfront(line)); 
free(commands); 
deletegrayz(&line); 
ptr=0; 
i=0; 
flag=0; 
break; 
} 
} 
} 
printf("\n"); 
return 0; 
} 

int FILE *f 
{ 
int *commands=0; 
char c,ganz[256]; 
int i,j,flag=0,len=0; 
grayz *ganzlist=0; 
ganzlist=creategrayz(); 

while ((c=fgetc(f))!=EOF) 
{ 
if (c=='\n') 
{ 
if (flag==2) 
++len; 
flag=0; 
continue; 
} 
if (c=='*') flag=1; 
if (flag==1) continue; 
if ((!(c==' '))&&(!(c=='\t'))) flag = 2; 
} 

fseek(f,ftell(f)-2,SEEK_SET); 
c=fgetc(f); 
if ((c=='\n')&&(fgetc(f)==EOF)); else ++len; 
commands=(int*)malloc((len+1)int); 
commands[len]=0; 
fseek(f,SEEK_SET,0); 
flag=0; 
i=0; 

while ((c=fgetc(f))!=EOF) 
{ 
if (c=='\n') 
{ 
if (flag==2) 
{ 
for (j=0;ganzlist->length;++j) 
{ 
ganz[j]=popfront(ganzlist); 
} 
ganz[j]='\0'; 

if (!strcmp("inc",ganz)) commands[i]=INC; 
if (!strcmp("VAYY",ganz)) commands[i]=VAYY; 
if (!strcmp("movl",ganz)) commands[i]=MOVL; 
if (!strcmp("movr",ganz)) commands[i]=MOVR; 
if (!strcmp("get",ganz)) commands[i]=GET; 
if (!strcmp("print",ganz)) commands[i]=PRINT; 
if (!strcmp("printc",ganz)) commands[i]=PRINTC; 
if (!strcmp("begin",ganz)) commands[i]=BEGIN; 
if (!strcmp("end",ganz)) commands[i]=END; 
++i; 
} 
flag=0; 
continue; 
} 
if (c=='*') flag=1; 
if (flag==1) continue; 
if ((c==' ')||(c=='\t')) continue; 
else flag=2; 
hurss(ganzlist,c); 
} 
return commands; 
}
